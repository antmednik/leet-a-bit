package edu.mednikov.array_and_string;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

class ThreeSumClosestTest {

    @ParameterizedTest
    @MethodSource("arguments")
    void threeSumClosest(int[] nums, int target, int expected) {
        assertThat(new ThreeSumClosest().threeSumClosest(nums, target)).isEqualTo(expected);
    }

    private static Stream<Arguments> arguments() {
        return Stream.of(
                Arguments.of(new int[]{-1,2,1,-4}, 1, 2),
                Arguments.of(new int[]{0,0,0}, 1, 0),
                Arguments.of(new int[]{1, 1, 1, 1}, 0, 3),
                Arguments.of(new int[]{4,0,5,-5,3,3,0,-4,-5}, -2, -2),
                Arguments.of(new int[]{1,1,1,0}, 100, 3),
                // time limit
                Arguments.of(new int[]{790,-903,922,-956,-200,210,-22,-952,-960,-529,694,257,556,689,252,-562,-505,146,-331,14,-556,-467,107,-919,-317,490,-306,482,108,-261,139,571,-770,910,919,-715,372,-159,246,-563,-958,913,-232,409,-570,685,-611,-569,-253,-984,-916,715,687,-724,980,966,443,427,405,-517,-798,963,-341,761,921,700,217,-347,626,621,235,-658,-171,-436,-907,174,379,971,-560,270,931,-561,-931,279,255,312,-681,-320,853,941,-914,-906,986,-758,69,236,-220,366,918,885,-432,776,631,882,-843,-743,82,-702,-741,617,357,-593,-123,-470,960,-264,264,-544,-479,520,-218,902,-682,789,348,-270,-291,-60,630,-414,891,-55,880,742,-429,52,-519,904,895,-687,-600,-288,-605,544,858,-821,-430,-604,938,376,-844,-610,518,-769,269,578,284,-192,-491,-788,-424,-9,-369,-346,-405,200,-330,463,-766,-329,171,722,-599,-876,260,749,-116,-540,-379,-615,-477,593,886,-875,-376,645,828,-135,788,619,-666,-943,-154,136,-156,353,-373,710,774,-269,3,-280,-313,-620,-205,602,-551,800,-98,-356,-26,615,-559,505,-273,-841,-871,275,992,-397,-110,-820,-78,183,-911,218,637,-874,-281,97,216,-825,772,148,156,900,-304,-68,-996,757,562,-836,9,927,701,222,-972,925,-142,-649,-349,-754,-933,199,618,359,-325,752,-665,823,151,-1000,707,-630,-385,-365,669,-109,-173,-284,932,-328,478,609,-927,-656,-146,-951,-642,24,-444,-772,822,403,704,819,-407,-482,-775,-216,-445,969,-700,-138,888,-596,675,371,978,42,982,977,-995,568,-660,-403,831,43,-43,-249,-751,662,-730,74,646,690,879,-254,-15,-594,-904,-747,-342,606,167,893,973,915,-707,-614,181,321,-136,-923,-859,-690,984,28,605,302,756,145,784,131,450,702,-826,-314,-587,-152,959,-532,-925,-389,-755,-72,368,-465,-623,-112,493,-308,766,-478,643,-315,-207,773,57,-303,-499,83,-672,864,35,519,620,-490,123,-932,-753,693,26,-87,814,-181,53,-449,786,-633,852,624,88,503,-165,827,559,-541,-760,546,-745,-729,-398,807,-219,758,-771,-897,-885,-839,582,-292,994,-282,857,-873,-584,840,-316,835,604,770,-993,524,-91,-608,-838,-120,909,-705,-691,989,839,-435,589,-554,-668,473,-641,-457,-855,-864,323,-295,-95,34,-858,271,497,19,-986,-294,55,818,666,-714,553,318,249,-815,-946,-223,-37,682,998,560,-258,420,-36,-319,-953,-131,4,532,768,-947,877,-426,946,-82,397,-989,-637,-119,280,231,393,588,558,6,-909,-900,491,-704,-311,683,29,-964,-74,813,947,639,-942,-148,862,949,-96,81,-475,-145,326,474,-47,-664,274,-645,-830,424,842,-54,465,779,-187,-3,256,-139,-184,665,32,850,-977,293,-274,820,-640,655,-118,-558,-352,-718,-224,796,-526,718,47,356,186,526,-574,-333,-597,903,622,-508,102,-32,-132,-627,-553,287,-160,782,61,-822,-206,981,-706,-582,671,30,10,-296,416,100,-417,-616,-161,408,-265,531,122,258,-684,-930,530,-438,-335,-383,-530,471,-214,799,-340,90,295,-194,920,654,-34,762,-189,638,-92,296,-240,-59,-121,-784,743,-795,-134,190,907,647,-752,-828,-713,-638,-453,182,324,-513,928,415,-46,-872,189,-193,157,345,-307,974,587,-443,-639,177,838,-968,997,-88,-149,-256,48,317,128,724,173,-65,-233,-462,-818,965,-621,-458,-237,-585,-710,-377,576,-973,-835,436,147,455,-979,-104,-790,775,87,952,392,-180,-819,500,-21,-245,-538,-251,585,-198,430,-446,294,-2,-309,-199},
                        1560, 1560)

        );
    }
}